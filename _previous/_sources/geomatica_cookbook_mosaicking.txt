**Mosaicking**
=================================
This section provides help, error handling and etc.

Automatic color balancing and seamline generation (With QA preview mosaic)
--------------------------------------------------------------------------
    This recipe calls a single function which performs color balancing and generates seamlines. 
    It also creates an XML file that can be loaded into Geomatica's Mosaic Tool for 
    performing quality assurance on a preview mosaic.

    .. code-block:: python

        from pci.mosprep import mosprep

        orthos = r"C:\project001\orthos"
        src_img_file = r"C:\project001\mosaic_prep\preview_proj001.xml"
        normalize = "None" #HotSpot method often useful for airphoto imagery
        col_balance = "neighborhood"
        cutlines = "minsqdiff"

        mosprep(orthos, src_img_file, [], "", normalize, 
                col_balance, cloud_mask, globfile, globmask, cutlines)
        
        
Generate full resolution mosaic (single image)
----------------------------------------------
    This example explicitly imports the pansharp2 function from the pansharp2 module and imports
    all onjects and functions from the ortho2 module

    .. code-block:: python

        from pci.mosdef import mosdef
        from pci.mosrun2 import mosrun2  
        
        #Create Mosaic Definition XML file to 
        src_image_file = r"C:\project001\mosaic_prep\preview_proj001.xml" #output from mosprep
        mosdef_file = r"C:\project001\mosaic_def\def_proj001.xml"
        mos_res = [2]
        blend_width = [5]
        
        mosdef(src_image_file, mosdef_file, [], "", "", 
                "", mos_res, blend_width, [], "", "")
        
        #Create full resolution mosaic
        mos_dir = r"C:\project001\Final_mosaic"
        source_map = "yes"
        
        mosrun2(src_image_file, mosdef_file, mos_dir, "", source_map, "", "", "", "")
               
        
Generate Mosaic tiles (from vector map-sheet) with JPEG compression
-------------------------------------------------------------------
    This recipe creates a full resolution tiled mosaic with jpeg compression set to 75%. This
    can be very useful for when generating large mosaics. 

    This recipe provides an example of creating tif tiles (with JPEG compression) defined by 
    vector polygons. The polygons can have overlap.
    The recipe also names the tiles using an attribute field "Tile Code" 

    .. code-block:: python

        from pci.mosdef import mosdef
        from pci.mosrun2 import mosrun2  
        
        #Create Mosaic Definition XML file to 
        src_image_file = r"C:\project001\mosaic_prep\preview_proj001.xml"
        mosdef_file = r"C:\project001\mosaic_def\def_proj001.xml"
        tile_specs = r"VECTOR, C:\project001\misc\tiles.pix, Tile_Code" #tiling parameter 
        mos_res = [2]
        blend_width = [5]
        
        mosdef(src_image_file, mosdef_file, [], "", "", "", mos_res, blend_width, 
               [], "TIF", "JPEG75") #.tif output file format with JPEG 75% compression
        
        #Create full resolution mosaic
        mos_dir = r"C:\project001\Final_mosaic"
        source_map = "yes"
        
        mosrun2(src_image_file, mosdef_file, mos_dir, "", source_map, 
                "", "", "TIF", "JPG") #
        
        
Clip Mosaic to polygon (Cookie Cutter Method)
---------------------------------------------
    This recipe provides code that will clip a mosaic along the edges of an input irregular polygon. This is
    commonly known as a "Cookie Cutter" method. 

    E.g. For country-wide mosaics, the function can remove the imagery outside of a country's
    political borders. 

    .. code-block:: python

        from pci.pansharp2 import pansharp2
        from pci.exceptions import PCIException

        ms_file = r"c:\NewYorkk_multispectral.pix" #this file is incorrectly spelt and thus, does not exist
        ms_channels = [1,2,3,4] #pansharpen channels 1 to 4 (Red, green, blue and NIR) 
        pan_file = r"c:\NewYork_panchromatic.pix"
        out_file = r"c:\NewYork_pansharpened.pix"

        try:
            pansharp2(ms_file, ms_channels, [], pan_file, [], out_file, [], "", [], "", "pix", "tiled512")
        except PCIException, e:
            print e
        except Exception, e:
            print e
            
        #This results in python printing a PCI caught exception that the input multispectral file does not exist
        #The script will continue to run through to the next line of code without exiting, because the exception
        #is handled with a print statement
        

End-to-end mosaic generation with tiling - **Full Workflow** `Download <http://www.pcigeomatics.com/resources-support/more-resources/downloads>`_ 
-------------------------------------------------------------------------------------------------------------------------------------------------
    This recipe provides code that will clip a mosaic along the edges of an input irregular polygon. This is
    commonly known as a "Cookie Cutter" method. 

    E.g. For country-wide mosaics, the function can remove the imagery outside of a country's
    political borders. 

    .. code-block:: python
         
        from pci.mosprep import mosprep
        from pci.mosdef import mosdef
        from pci.mosrun2 import mosrun2
        from pci.exceptions import PCIException
    
        orthos = r"C:\project001\orthos"
        src_img_file = r"C:\project001\mosaic_prep\preview_proj001.xml"
        normalize = "None" #HotSpot method often useful for airphoto imagery
        col_balance = "neighborhood"
        cutlines = "minsqdiff"
        
        try:
            mosprep(orthos, src_img_file, [], "", normalize, 
                    col_balance, cloud_mask, globfile, globmask, cutlines)
        except PCIException, e:
            print e
        except Exception, e:
            print e
        
        #Create Mosaic Definition XML file to 
        mosdef_file = r"C:\project001\mosaic_def\def_proj001.xml"
        tile_specs = r"VECTOR, C:\project001\misc\tiles.pix, Tile_Code" #tiling parameter 
        mos_res = [2]
        blend_width = [5]
        
        try:
            mosdef(src_image_file, mosdef_file, [], "", "", "", mos_res, blend_width, 
                [], "TIF", "JPEG75") #.tif output file format with JPEG 75% compression
        except PCIException, e:
            print e
        except Exception, e:
            print e
        
        #Create full resolution mosaic
        mos_dir = r"C:\project001\Final_mosaic"
        source_map = "yes"
        
        try:
            mosrun2(src_image_file, mosdef_file, mos_dir, "", source_map, 
                    "", "", "TIF", "JPG") #
        except PCIException, e:
            print e
        except Exception, e:
            print e